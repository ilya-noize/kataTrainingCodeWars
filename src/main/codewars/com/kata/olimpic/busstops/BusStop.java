package codewars.com.kata.olimpic.busstops;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;

/*


–ï—Å–ª–∏ –∞–≤—Ç–æ–±—É—Å –∏–º–µ–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É x, —Ç–æ –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –Ω–æ–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ i, –º–∏–Ω–∏–º–∏–∑–∏—Ä—É—é—â–∏–π
‚à£ùëéùëñ‚Äìùë•‚à£. –ï—Å–ª–∏ —Ç–∞–∫–∏—Ö ùëñ –Ω–µ—Å–∫–æ–ª—å–∫–æ, —Ç–æ –≤—ã–±–∏—Ä–∞—Ç—å –Ω–æ–º–µ—Ä –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º:

- –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, —Å–æ–≤–ø–∞–¥–∞—é—â–∏–µ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ–π –∞–≤—Ç–æ–±—É—Å–∞, —Ç–æ —Å—Ç–æ–∏—Ç –≤—ã–≤–µ—Å—Ç–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –ø–æ –Ω–æ–º–µ—Ä—É —Å—Ä–µ–¥–∏ –Ω–∏—Ö.
- –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–ø—Ä–∞–≤–∞ –∏ —Å–ª–µ–≤–∞, —Ç–æ —Å—Ç–æ–∏—Ç –≤—ã–≤–µ—Å—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø–æ –Ω–æ–º–µ—Ä—É —Å—Ä–µ–¥–∏ –ª–µ–≤—ã—Ö.
- –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ–ª—å–∫–æ —Å–ª–µ–≤–∞, —Ç–æ —Å—Ç–æ–∏—Ç –≤—ã–≤–µ—Å—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø–æ –Ω–æ–º–µ—Ä—É —Å—Ä–µ–¥–∏ –ª–µ–≤—ã—Ö.
- –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ–ª—å–∫–æ —Å–ø—Ä–∞–≤–∞, —Ç–æ —Å—Ç–æ–∏—Ç –≤—ã–≤–µ—Å—Ç–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –ø–æ –Ω–æ–º–µ—Ä—É —Å—Ä–µ–¥–∏ –ø—Ä–∞–≤—ã—Ö.


–í –ø—Ä–∏–º–µ—Ä–µ –¥–∞–Ω—ã –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
1,3,5.

–î–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∞–≤—Ç–æ–±—É—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ—á–∫–µ 4 –∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
–¥–æ –æ—Å—Ç–∞–Ω–æ–≤–æ–∫ –æ—Ç –Ω–µ–≥–æ —Ä–∞–≤–Ω—ã 3,1,1 —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ:
- –≠—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
—Å–ª–µ–≤–∞ (–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º 2) –∏
—Å–ø—Ä–∞–≤–∞ (–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º 3), –∞ –∑–Ω–∞—á–∏—Ç –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å
–º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø–æ –Ω–æ–º–µ—Ä—É —Å—Ä–µ–¥–∏ –ª–µ–≤—ã—Ö - 2.

- –í–æ –≤—Ä–µ–º—è –≤—Ç–æ—Ä–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∞–≤—Ç–æ–±—É—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ—á–∫–µ 1,
–∞ –∑–Ω–∞—á–∏—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤—Å–µ–≥–æ –æ–¥–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞,
–º–∏–Ω–∏–º–∏–∑–∏—Ä—É—é—â–∞—è –∑–∞–¥–∞–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ = 0.

 */
public class BusStop {

    public static void main(String[] args) throws IOException {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));

        String[] config = reader.readLine().trim().split(" ");
        String[] lineBusStop = reader.readLine().trim().split(" ");
        String[] lineBus = reader.readLine().trim().split(" ");

        int numberStops = Integer.parseInt(config[0]);
        int[] busStops = new int[numberStops];
        for (int i = 0; i < numberStops; i++) {
            busStops[i] = Integer.parseInt(lineBusStop[i]);
        }

        int numberBuses = Integer.parseInt(config[1]);
        int[] buses = new int[numberBuses];
        for (int i = 0; i < numberBuses; i++) {
            buses[i] = Integer.parseInt(lineBus[i]);
        }

        sortAscendingOrder(busStops, numberStops);

        int[] nearestStops = getNearestStops(busStops, buses);

        for (int i : nearestStops) {
            writer.write(i + "\n");
        }

        reader.close();
        writer.close();
    }

    public static int[] getNearestStops(int[] busStops,
                                        int[] buses) {

        int numberStops = busStops.length;

        int numberBuses = buses.length;
        int[] nearestStops = new int[numberBuses];
        for (int numberBus = 0; numberBus < numberBuses; numberBus++) {

            int bus = buses[numberBus];

            if (numberBus == 0) {
                nearestStops[numberBus] = getNearestStop(
                        busStops,
                        numberStops,
                        bus
                );
            } else {
                for (int i = 0; i < numberBus; i++) {
                    int nextBus = buses[i];
                    if (nextBus == bus) {
                        nearestStops[numberBus] = nearestStops[i];
                        break;
                    }
                }
                if (nearestStops[numberBus] == 0) {
                    nearestStops[numberBus] = getNearestStop(
                            busStops,
                            numberStops,
                            bus
                    );
                }
            }
        }

        return nearestStops;
    }

    public static void showArray(int[] busStops) {
        int numberStops = busStops.length;
        System.out.println();
        System.out.printf("int[] busStopSort = /* %d */{%n", numberStops);
        String format = "  %d => %d,%n";
        for (int i = 0; i < numberStops; i++) {
            if (i + 1 == numberStops) format = "  %d => %d";
            System.out.printf(format, i + 1, busStops[i]);
        }
        System.out.println("};");
    }

    private static int getNearestStop(int[] busStops, int numberStops, int bus) {
        int index = numberStops;
        int busStop = busStops[index - 1];
        int distance = Math.abs(bus - busStop);

        if (distance != 0) {
            for (int numberStop = numberStops - 2; numberStop >= 0; numberStop--) {

                busStop = busStops[numberStop];

                int currentDistance = Math.abs(bus - busStop);

                if (distance >= currentDistance) {
                    if (numberStop != 0) {
                        distance = currentDistance;
                        index = numberStop;
                    } else {

                        return numberStop + 1;
                    }
                } else {

                    return index + 1;
                }
            }
        }

        return index;
    }

    public static int[] sortAscendingOrder(int[] a, int size) {
        int[] seq = new int[40];
        int s;

        // –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏—Ä–∞—â–µ–Ω–∏–π
        s = increment(seq, size);
        while (s >= 0) {
            // —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤—Å—Ç–∞–≤–∫–∞–º–∏ —Å –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–º–∏ inc[]
            int inc = seq[s--];

            for (int i = inc; i < size; i++) {
                try {
                    int temp = a[i];
                    int j;
                    for (j = i - inc; (j >= 0) && (a[j] > temp); j -= inc) {
                        a[j + inc] = a[j];
                    }
                    a[j + inc] = temp;
                } catch (ArrayIndexOutOfBoundsException arrayIndexOutOfBoundsException) {
                    break;
                }
            }
        }
        return a;
    }

    private static int increment(int[] inc, int size) {
        int p1 = 1;
        int p2 = 1;
        int p3 = 1;
        int s = -1;

        do {
            if ((++s % 2) > 0) {
                inc[s] = 8 * p1 - 6 * p2 + 1;
            } else {
                inc[s] = 9 * p1 - 9 * p3 + 1;
                p2 *= 2;
                p3 *= 2;
            }
            p1 *= 2;
        } while (3 * inc[s] < size);

        return s > 0 ? --s : 0;
    }
}
